service: ${file(./configLogic.js):serviceName}

plugins:
  - serverless-webpack
  - serverless-offline
  - create-s3-bucket-redirect
  - empty-s3-bucket

custom:
  webpack: webpack.config.js
  webpackIncludeModules:
    forceExclude:
      - aws-sdk
  bucketDeletionPolicy: ${env:SOURCE_S3_BUCKET_DELETION_POLICY, self:custom.default.bucketDeletionPolicy}
  bucketName: ${env:CLOUD_FRONT_DOMAIN, env:SOURCE_S3_BUCKET_NAME}
  cloudFrontDomain: ${env:CLOUD_FRONT_DOMAIN, ''}
  cloudFrontHostedZone: ${env:CLOUD_FRONT_HOSTED_ZONE, ''}
  cloudFrontCertArn: ${env:CLOUD_FRONT_CERT_ARN, ''}
  uploadAuthorizerName: ${file(./configLogic.js):uploadAuthorizerName}
  default:
    stage: dev
    region: eu-west-1
    bucketDeletionPolicy: Retain

provider:
  name: aws
  stage: ${opt:stage, self:custom.default.stage}
  runtime: nodejs6.10
  region: ${opt:region, self:custom.default.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::${self:custom.bucketName}"
    - Effect: Allow
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::${self:custom.bucketName}/*"
  environment:
    SOURCE_S3_BUCKET_NAME: ${self:custom.bucketName}
    SOURCE_S3_WEBSITE: ${env:SOURCE_S3_WEBSITE, ''}
    CLOUD_FRONT_DOMAIN: ${self:custom.cloudFrontDomain}
    CACHE_MAX_AGE: ${env:CACHE_MAX_AGE, ''}

functions:
  resizer:
    handler: index.resizer
    events:
      - http:
          path: resizer/{path+}
          method: get
  customUploadAuthorizer:
    handler: "${env:UPLOAD_AUTHORIZER_FILE, 'index'}:uploadAuthorizer"
  createUploadUrl:
    handler: index.createUploadUrl
    events:
      - http:
          path: upload-url
          method: post
          cors: true
          authorizer: ${self:custom.uploadAuthorizerName}

resources:
  Conditions:
    IsDeployingCloudFront:
      Fn::Not:
        - Fn::Or:
          - Fn::Equals:
            - ${self:custom.cloudFrontDomain}
            - ''
          - Fn::Equals:
            - ${self:custom.cloudFrontHostedZone}
            - ''
          - Fn::Equals:
            - ${self:custom.cloudFrontCertArn}
            - ''
    IsIamAuth:
      Fn::Equals:
        - ${self:custom.uploadAuthorizerName}
        - aws_iam

  Resources:
    CdnImageBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: ${self:custom.bucketDeletionPolicy}
      Properties:
        BucketName: ${self:custom.bucketName}
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedOrigins:
                - '*'
              AllowedMethods:
                - GET
                - HEAD
                - PUT
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html
    CdnImageUploadPolicy:
      Type: 'AWS::IAM::ManagedPolicy'
      Condition: IsIamAuth
      Properties:
        ManagedPolicyName: "CdnImageUploadAccess${self:service}${self:provider.stage}"
        Description: 'Grants permission to upload images to the cdn bucket'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: 'StmtUploadAccess'
              Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ""
                  - - 'arn:aws:execute-api:'
                    - Ref: 'AWS::Region'
                    - ':'
                    - Ref: 'AWS::AccountId'
                    - ':'
                    - Ref: 'ApiGatewayRestApi'
                    - "/${self:provider.stage}"
                    - '/POST/upload-url'
    CdnImageCloudfront:
      Type: AWS::CloudFront::Distribution
      Condition: IsDeployingCloudFront
      DependsOn:
        - CdnImageBucket
        - ApiGatewayRestApi
      Properties:
        DistributionConfig:
          Comment: Cloudfront Distribution pointing to S3 bucket and image resizer
          Enabled: true
          HttpVersion: 'http2'
          Aliases:
            - ${self:custom.cloudFrontDomain}
          Origins:
          - DomainName:
              Fn::Select:
                - 2
                - Fn::Split:
                  - "/"
                  - Fn::GetAtt: CdnImageBucket.WebsiteURL
            OriginPath: '/images'
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
          - DomainName:
              Fn::GetAtt: CdnImageBucket.DomainName
            Id: S3DirectOrigin
            S3OriginConfig:
              OriginAccessIdentity: ""
          - DomainName:
              Fn::Join:
                - ""
                - - Ref: 'ApiGatewayRestApi'
                  - '.execute-api.'
                  - Ref: 'AWS::Region'
                  - '.amazonaws.com'
            OriginPath: '/${self:provider.stage}'
            Id: APIGatewayOrigin
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: https-only
          CacheBehaviors:
            - AllowedMethods:
                - GET
                - HEAD
              Compress: true
              PathPattern: "resizer/*"
              TargetOriginId: APIGatewayOrigin
              ForwardedValues:
                QueryString: false
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
            - AllowedMethods:
                - GET
                - HEAD
              PathPattern: "images/*"
              TargetOriginId: S3DirectOrigin
              ForwardedValues:
                QueryString: false
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            TargetOriginId: S3Origin
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          PriceClass: PriceClass_All
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.cloudFrontCertArn}
            SslSupportMethod: sni-only
    CdnDNSName:
      Type: AWS::Route53::RecordSetGroup
      Condition: IsDeployingCloudFront
      DependsOn: CdnImageCloudfront
      Properties:
        HostedZoneName: ${self:custom.cloudFrontHostedZone}
        RecordSets:
        - Name: ${self:custom.cloudFrontDomain}
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # This is cloudfront's hosted zone id. https://docs.aws.amazon.com/Route53/latest/APIReference/API_AliasTarget.html#Route53-Type-AliasTarget-HostedZoneId
            DNSName:
              Fn::GetAtt: CdnImageCloudfront.DomainName
